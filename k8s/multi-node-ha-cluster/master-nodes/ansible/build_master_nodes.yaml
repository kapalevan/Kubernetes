---
- name: Setup Kubernetes Master Node
  hosts: masters
  become: true
  vars_files:
    - vars.yaml

  tasks:
    - name: Ensure running as root
      fail:
        msg: "This script must be run as root"
      when: ansible_user_id != 'root'

    - name: Check for Ubuntu 20.04
      fail:
        msg: "This script only works on Ubuntu 20.04"
      when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '20.04'

    - name: Update and Install Prerequisites
      apt:
        name:
          - bash-completion
          - binutils
        update_cache: yes

    - name: Setup Terminal
      lineinfile:
        path: ~/.bashrc
        line: "{{ item }}"
      loop:
        - 'force_color_prompt=yes'
        - 'source <(kubectl completion bash)'
        - 'alias k=kubectl'
        - 'alias c=clear'
        - 'complete -F __start_kubectl k'

    - name: Disable Swap
      command: swapoff -a
      ignore_errors: yes

    - name: Comment Swap in fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*\S+\s+swap\s'
        line: '#\1'

    - name: Remove any existing Kubernetes installations
      block:
        - name: Reset kubeadm
          command: kubeadm reset -f
          ignore_errors: yes

        - name: Remove existing crictl containers
          command: crictl rm --force $(crictl ps -a -q)
          ignore_errors: yes

        - name: Unhold kubernetes packages
          command: apt-mark unhold kubelet kubeadm kubectl kubernetes-cni
          ignore_errors: yes

        - name: Remove Kubernetes components
          apt:
            name:
              - docker.io
              - containerd
              - kubelet
              - kubeadm
              - kubectl
              - kubernetes-cni
            state: absent

        - name: Autoremove unneeded packages
          apt:
            autoremove: yes

        - name: Reload systemd daemon
          systemd:
            daemon_reload: yes

    - name: Install Podman and related tools
      block:
        - name: Add podman repository
          apt_repository:
            repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/ /"
            state: present

        - name: Install podman and cri-tools
          apt:
            name:
              - podman
              - cri-tools
              - containers-common
            update_cache: yes
            state: present

    - name: Install Kubernetes Components
      block:
        - name: Add Kubernetes GPG key
          apt_key:
            url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
            state: present

        - name: Add Kubernetes apt repository
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
            state: present

        - name: Install Kubernetes packages
          apt:
            name:
              - "kubelet={{ kubernetes_version }}-00"
              - "kubeadm={{ kubernetes_version }}-00"
              - "kubectl={{ kubernetes_version }}-00"
              - kubernetes-cni
            update_cache: yes
            state: present

        - name: Hold Kubernetes packages
          command: apt-mark hold kubelet kubeadm kubectl

    - name: Install containerd 1.6
      block:
        - name: Download containerd 1.6
          get_url:
            url: https://github.com/containerd/containerd/releases/download/v1.6.12/containerd-1.6.12-linux-amd64.tar.gz
            dest: /tmp/containerd-1.6.12-linux-amd64.tar.gz

        - name: Extract containerd archive
          unarchive:
            src: /tmp/containerd-1.6.12-linux-amd64.tar.gz
            dest: /usr/bin/
            remote_src: yes

        - name: Start containerd service
          systemd:
            name: containerd
            state: started
            enabled: yes

    - name: Containerd Setup
      block:
        - name: Load overlay module
          modprobe:
            name: overlay
            state: present

        - name: Load br_netfilter module
          modprobe:
            name: br_netfilter
            state: present

        - name: Apply sysctl settings for Kubernetes
          sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            state: present
            reload: yes
          loop:
            - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
            - { key: 'net.ipv4.ip_forward', value: '1' }
            - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

    - name: Configure crictl to use containerd
      copy:
        content: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
        dest: /etc/crictl.yaml

    - name: Configure kubelet to use containerd
      lineinfile:
        path: /etc/default/kubelet
        line: 'KUBELET_EXTRA_ARGS="--container-runtime-endpoint unix:///run/containerd/containerd.sock"'

    - name: Enable and Start Services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - containerd
        - kubelet

    - name: Load Balancer Configuration for HA setup
      set_fact:
        load_balancer_dns: "api-server.devops.tbc"
        load_balancer_port: 6443

    - name: Kubeadm Config for HA Setup
      copy:
        content: |
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: ClusterConfiguration
          kubernetesVersion: {{ kubernetes_version }}
          controlPlaneEndpoint: "{{ load_balancer_dns }}:{{ load_balancer_port }}"
          networking:
            podSubnet: 192.168.0.0/16
        dest: /etc/kubernetes/kubeadm-config.yaml

    - name: Initialize the First Master Node
      command: >
        kubeadm init --kubernetes-version={{ kubernetes_version }} --ignore-preflight-errors=NumCPU
        --control-plane-endpoint="{{ load_balancer_dns }}:{{ load_balancer_port }}" --upload-certs
        --apiserver-advertise-address={{ apiserver_advertise_address }} --pod-network-cidr=192.168.0.0/16
      register: kubeadm_init

    - name: Setup kubeconfig for local use
      block:
        - name: Create .kube directory
          file:
            path: $HOME/.kube
            state: directory

        - name: Copy admin.conf to user's kube config
          copy:
            src: /etc/kubernetes/admin.conf
            dest: $HOME/.kube/config
            remote_src: yes
          become_user: "{{ ansible_env.SUDO_USER | default(ansible_env.USER) }}"

    - name: Extract Kubernetes API server's certificate
      block:
        - name: Get API server address
          command: kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'
          register: apiserver_address

        - name: Extract and add API server's certificate
          command: openssl s_client -connect {{ apiserver_address.stdout.split('/')[2] }} </dev/null 2>/dev/null | openssl x509 -outform PEM
          register: apiserver_cert

        - name: Add certificate to system's trusted CA store
          copy:
            content: "{{ apiserver_cert.stdout }}"
            dest: /usr/local/share/ca-certificates/kubernetes.crt
          notify: Update CA certificates

    - name: Apply CNI Plugin
      command: kubectl apply -f https://github.com/kapalevan/Kubernetes/raw/main/k8s/multi-node-ha-cluster/master-nodes/yaml-manifests/cni/calico/calico.yaml

    - name: Setup etcdctl
      block:
        - name: Download etcdctl
          get_url:
            url: https://github.com/etcd-io/etcd/releases/download/{{ etcdctl_version }}/etcd-{{ etcdctl_version }}-linux-{{ ansible_architecture }}.tar.gz
            dest: /tmp/etcd-{{ etcdctl_version }}-linux-{{ ansible_architecture }}.tar.gz

        - name: Extract etcdctl
          unarchive:
            src: /tmp/etcd-{{ etcdctl_version }}-linux-{{ ansible_architecture }}.tar.gz
            dest: /usr/bin/
            remote_src: yes

    - name: Display command for joining other master nodes
      command: kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs)
      register: master_join_command

    - name: Show master node join command
      debug:
        msg: "{{ master_join_command.stdout }}"

    - name: Command to add a worker node
      command: kubeadm token create --print-join-command --ttl 0
      register: worker_join_command

    - name: Show worker node join command
      debug:
        msg: "{{ worker_join_command.stdout }}"

  handlers:
    - name: Update CA certificates
      command: update-ca-certificates