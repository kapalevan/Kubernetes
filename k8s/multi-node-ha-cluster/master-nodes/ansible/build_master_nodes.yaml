- hosts: masters
  become: true
  vars_files:
    - vars.yaml
    - vault.yaml

  tasks:
    - name: Check Ubuntu Version
      fail:
        msg: "This playbook is only compatible with Ubuntu 20.04."
      when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '20.04'

    - name: Update and Install Prerequisites
      apt:
        name:
          - bash-completion
          - binutils
        update_cache: yes

    - name: Ensure .vimrc exists
      file:
        path: "/root/.vimrc"
        state: touch
        mode: '0644'

    - name: Configure vimrc
      blockinfile:
        path: "/root/.vimrc"
        block: |
          colorscheme ron
          set tabstop=2
          set shiftwidth=2
          set expandtab
        create: yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: Setup Terminal Configuration
      blockinfile:
        path: "~/.vimrc"
        block: |
          colorscheme ron
          set tabstop=2
          set shiftwidth=2
          set expandtab
        create: yes
    - name: Configure Bashrc for kubectl
      blockinfile:
        path: "~/.bashrc"
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          alias c=clear
          complete -F __start_kubectl k
          force_color_prompt=yes

    - name: Disable Swap
      command: swapoff -a

    - name: Update fstab to disable swap
      lineinfile:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s)'
        line: '#\1'

    - name: Reset Kubernetes if installed
      block:
        - name: Reset kubeadm
          command: kubeadm reset -f
          ignore_errors: yes

        - name: Unhold Kubernetes packages
          dpkg_selections:
            name: "{{ item }}"
            selection: install
          loop:
            - docker.io
            - containerd
            - kubelet
            - kubeadm
            - kubectl
            - kubernetes-cni

        - name: Remove existing Kubernetes packages
          apt:
            name:
              - docker.io
              - containerd
              - kubelet
              - kubeadm
              - kubectl
              - kubernetes-cni
            state: absent
            purge: yes

        - name: Autoremove unnecessary packages
          apt:
            autoremove: yes

    - name: Install Podman and dependencies
      block:

        - name: Add GPG key for Podman repository
          apt_key:
            url: "http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/Release.key"
            state: present

        - name: Add Podman repository
          apt_repository:
            repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }} /"
            state: present
            filename: 'libcontainers-stable'
            update_cache: yes

        - name: Install Podman and CRI tools
          apt:
            name:
              - podman
              - cri-tools
              - containers-common
            state: present

        - name: Configure container registries
          copy:
            content: |
              [registries.search]
              registries = ['docker.io']
            dest: /etc/containers/registries.conf

    - name: Install Kubernetes Components
      block:
        - name: Install apt-transport-https and ca-certificates
          apt:
            name:
              - apt-transport-https
              - ca-certificates
            state: present
            update_cache: yes

    - name: Add Kubernetes GPG key
      become: yes
      block:
        - name: Create /etc/apt/keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Add Kubernetes GPG key to keyring
          ansible.builtin.shell: |
                curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

        - name: Add Kubernetes repository
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
            filename: 'kubernetes.list'
            state: present
            update_cache: yes

    - name: Unhold Kubernetes packages if they are held
      dpkg_selections:
        name: "{{ item }}"
        selection: install
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Install Kubernetes packages
      apt:
        name:
          - docker.io
          - containerd
          - kubelet={{ kubernetes_version }}-00
          - kubeadm={{ kubernetes_version }}-00
          - kubectl={{ kubernetes_version }}-00
          - kubernetes-cni
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Ensure /var/lib/kubelet directory exists
      file:
        path: /var/lib/kubelet
        state: directory
        mode: '0755'

    - name: Generate correct KubeletConfiguration file
      shell: |
        kubeadm config print init-defaults --component-configs KubeletConfiguration | awk '/kubelet:/,/---/' > /var/lib/kubelet/kubelet-config.yaml
      args:
        executable: /bin/bash
      when: inventory_hostname == "master01"

    - name: Update kubelet service to use the new config
      lineinfile:
        path: /etc/default/kubelet
        regexp: '^KUBELET_EXTRA_ARGS='
        line: 'KUBELET_EXTRA_ARGS="--config=/var/lib/kubelet/kubelet-config.yaml"'
        create: yes
        state: present

    - name: Restart kubelet service to apply new configuration
      systemd:
        name: kubelet
        state: restarted
      when: inventory_hostname == "master01"

    - name: Install containerd 1.6
      block:
        - name: Ensure /etc/containerd directory exists
          file:
            path: /etc/containerd
            state: directory
            mode: '0755'

        - name: Download containerd
          get_url:
            url: "https://github.com/containerd/containerd/releases/download/v1.6.12/containerd-1.6.12-linux-amd64.tar.gz"
            dest: "/tmp/containerd-1.6.12-linux-amd64.tar.gz"

        - name: Extract containerd
          unarchive:
            src: "/tmp/containerd-1.6.12-linux-amd64.tar.gz"
            dest: "/tmp/"
            remote_src: yes

        - name: Copy containerd configuration file
          template:
            src: containerd-config.toml.j2
            dest: /etc/containerd/config.toml

        - name: Stop containerd service
          systemd:
            name: containerd
            state: stopped

        - name: Move containerd binaries
          command: mv /tmp/bin/* /usr/bin/
          args:
            creates: "/usr/bin/containerd"

        - name: Remove downloaded and extracted files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/containerd-1.6.12-linux-amd64.tar.gz"
            - "/tmp/bin"

        - name: Start and enable containerd
          systemd:
            name: containerd
            enabled: yes
            state: started

    - name: Configure containerd
      template:
        src: containerd-config.toml.j2
        dest: /etc/containerd/config.toml

    - name: Configure Networking
      block:
        - name: Load br_netfilter module
          modprobe:
            name: br_netfilter
            state: present


        - name: Set sysctl parameters
          sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_set: yes
            state: present
            reload: yes
          loop:
            - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
            - { key: 'net.ipv4.ip_forward', value: '1' }
            - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

        - name: Create containerd configuration file
          template:
            src: containerd-config.toml.j2
            dest: /etc/containerd/config.toml

    - name: Configure crictl to use containerd
      copy:
        content: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
        dest: /etc/crictl.yaml

    - name: Configure kubelet to use containerd
      copy:
        content: |
          KUBELET_EXTRA_ARGS="--container-runtime-endpoint unix:///run/containerd/containerd.sock"
        dest: /etc/default/kubelet

    - name: Enable and start kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: restarted

    - name: Create Kubeadm Config for HA Setup
      template:
        src: kubeadm-config.yaml.j2
        dest: /etc/kubernetes/kubeadm-config.yaml
      when: inventory_hostname == "master01"

    - name: Initialize Kubernetes cluster
      block:
        - name: Initialize Kubernetes cluster on master01
          shell: >
            kubeadm init
            --kubernetes-version {{ kubernetes_version }}
            --control-plane-endpoint "{{ load_balancer_dns }}:{{ load_balancer_port }}"
            --upload-certs
            --apiserver-advertise-address {{ apiserver_advertise_address }}
            --pod-network-cidr {{ pod_subnet }}
          when: inventory_hostname == "master01"

        - name: Extract and save certificate key
          shell: kubeadm init phase upload-certs --upload-certs
          register: upload_certs_output
          when: inventory_hostname == "master01"

        # - name: Debug certificate key output
        #   debug:
        #     var: upload_certs_output.stdout_lines

    - name: Setup kubeconfig and apply CNI Plugin on the first master
      block:
        - name: Create .kube directory
          file:
            path: "$HOME/.kube"
            state: directory
            mode: '0755'

        - name: Extract Kubernetes API Server's Certificate
          shell: |
            APISERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
            APISERVER_CERT=$(openssl s_client -connect ${APISERVER#https://} </dev/null 2>/dev/null | openssl x509 -outform PEM)
            echo "${APISERVER_CERT}" | sudo tee /usr/local/share/ca-certificates/kubernetes.crt
          when: inventory_hostname == "master01"

        - name: Update CA certificates
          command: update-ca-certificates

        - name: Extract certificate key
          set_fact:
            certificate_key: "{{ upload_certs_output.stdout | regex_search('(b[0-9a-f]{64})') }}"
          when: inventory_hostname == "master01"

        - name: Copy admin.conf to user's kube config
          copy:
            src: "/etc/kubernetes/admin.conf"
            dest: "$HOME/.kube/config"
            remote_src: yes
            mode: '0644'

        - name: Apply Calico CNI Plugin
          command: "kubectl apply -f https://github.com/kapalevan/Kubernetes/raw/main/k8s/multi-node-ha-cluster/master-nodes/yaml-manifests/cni/calico/calico.yaml"
      when: inventory_hostname == "master01"

    - name: Debug kubernetes_version
      ansible.builtin.debug:
        var: kubernetes_version

    - name: Setup etcdctl
      block:
        - name: Get architecture using dpkg
          ansible.builtin.command: dpkg --print-architecture
          register: dpkg_architecture
          changed_when: false

        - name: Download etcdctl
          ansible.builtin.get_url:
            url: "https://github.com/etcd-io/etcd/releases/download/{{ etcdctl_version }}/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
            dest: "/tmp/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
          vars:
            etcdctl_version: "v3.5.1"

        - name: Extract etcdctl
          ansible.builtin.unarchive:
            src: "/tmp/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
            dest: "/tmp/"
            remote_src: yes
            extra_opts: ["--strip-components=1"]

        - name: Move etcdctl to /usr/bin
          ansible.builtin.command:
            cmd: mv /tmp/etcdctl /usr/bin/
            creates: "/usr/bin/etcdctl"

        - name: Cleanup downloaded files
          ansible.builtin.file:
            path: "/tmp/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
            state: absent

        - name: Print Master Node Join command into static file
          shell: >
            CONTROL_PLANE_ENDPOINT="{{ load_balancer_dns }}:{{ load_balancer_port }}"
            join_command=$(kubeadm token create --print-join-command --ttl 0)
            token=$(echo $join_command | awk '{print $5}')
            discovery_token_ca_cert_hash_flag="--discovery-token-ca-cert-hash"
            discovery_token_ca_cert_hash=$(echo $join_command | grep -oP '(sha256:\S+)')
            certificate_key=$(kubeadm init phase upload-certs --upload-certs | tail -n1)
            full_join_command="kubeadm join $CONTROL_PLANE_ENDPOINT --token $token \
              $discovery_token_ca_cert_hash_flag $discovery_token_ca_cert_hash \
              --control-plane --certificate-key $certificate_key"
            echo $full_join_command >> /tmp/master_join_script.sh
          when: inventory_hostname == "master01"

        - name: Print Worker Node Join command into static file
          shell: >
            kubeadm token create --print-join-command --ttl 0  >> /tmp/worker_join_script.sh
          when: inventory_hostname == "master01"

        - name: Get join command from master01
          fetch:
            src: "/tmp/master_join_script.sh"
            dest: "/tmp/master_join_script.sh"
            flat: yes
          when: inventory_hostname == "master01"

        - name: Copy join file to master nodes
          copy:
            src: "/tmp/master_join_script.sh"
            dest: "/tmp/master_join_script.sh"
          when: inventory_hostname != "master01"

        - name: Get join command from master01
          fetch:
            src: "/tmp/worker_join_script.sh"
            dest: "/tmp/worker_join_script.sh"
            flat: yes
          when: inventory_hostname == "master01"

        - name: Copy join file to worker nodes
          copy:
            src: "/tmp/worker_join_script.sh"
            dest: "/tmp/worker_join_script.sh"
          when: inventory_hostname != "master01"

        - name: Make master nodes join script executable
          command: |
               chmod +x /tmp/master_join_script.sh
          when: inventory_hostname != "master01"

        - name: Join other master nodes to the cluster
          command: |
               sh /tmp/master_join_script.sh
          when: inventory_hostname != "master01"

        - name: Copy join file to worker nodes
          copy:
            src: "/tmp/worker_join_script.sh"
            dest: "/tmp/worker_join_script.sh"
          delegate_to: "{{ item }}"
          loop: "{{ worker_nodes }}"