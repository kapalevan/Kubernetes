---
- name: Setup Kubernetes Master Node
  hosts: masters
  become: yes
  gather_facts: yes
  vars_files:
    - vars.yaml
    - vault.yaml

  tasks:
    - name: Ensure running as root
      fail:
        msg: "This script must be run as root"
      when: ansible_user_id != 'root'

    - name: Check for Ubuntu 20.04
      fail:
        msg: "This script only works on Ubuntu 20.04"
      when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '20.04'

    - name: Update and Install Prerequisites
      apt:
        name:
          - bash-completion
          - binutils
        update_cache: yes

    - name: Ensure .vimrc exists
      file:
        path: "/root/.vimrc"
        state: touch
        mode: '0644'

    - name: Configure vimrc
      blockinfile:
        path: "/root/.vimrc"
        block: |
          colorscheme ron
          set tabstop=2
          set shiftwidth=2
          set expandtab
        create: yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: Setup Terminal Configuration
      blockinfile:
        path: "~/.vimrc"
        block: |
          colorscheme ron
          set tabstop=2
          set shiftwidth=2
          set expandtab

    - name: Configure Bashrc for kubectl
      blockinfile:
        path: "~/.bashrc"
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          alias c=clear
          complete -F __start_kubectl k
          force_color_prompt=yes

    - name: Disable Swap
      command: swapoff -a
      ignore_errors: yes

    - name: Comment Swap in fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*\S+\s+swap\s'
        line: '#\1'

    - name: Remove any existing Kubernetes installations
      block:
        - name: Reset kubeadm
          command: kubeadm reset -f
          ignore_errors: yes

        - name: Unhold Kubernetes packages
          dpkg_selections:
            name: "{{ item }}"
            selection: install
          loop:
            - docker.io
            - containerd
            - kubelet
            - kubeadm
            - kubectl
            - kubernetes-cni

        - name: Unhold kubernetes packages
          command: apt-mark unhold kubelet kubeadm kubectl kubernetes-cni
          ignore_errors: yes

        - name: Remove Kubernetes components
          apt:
            name:
              - docker.io
              - containerd
              - kubelet
              - kubeadm
              - kubectl
              - kubernetes-cni
            state: absent
            purge: yes

        - name: Autoremove unneeded packages
          apt:
            autoremove: yes

        - name: Reload systemd daemon
          systemd:
            daemon_reload: yes

    - name: Install Podman and related tools
      block:

        - name: Add GPG key for Podman repository
          apt_key:
            url: "http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/Release.key"
            state: present

        - name: Add Podman repository
          apt_repository:
            repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }} /"
            state: present
            filename: 'libcontainers-stable'
            update_cache: yes
        - name: Install podman and cri-tools
          apt:
            name:
              - podman
              - cri-tools
              - containers-common
            update_cache: yes
            state: present

    - name: Configure container registries
      copy:
        content: |
          [registries.search]
          registries = ['docker.io']
        dest: /etc/containers/registries.conf

    - name: Install Kubernetes Components
      block:
        - name: Install apt-transport-https and ca-certificates
          apt:
            name:
              - apt-transport-https
              - ca-certificates
            state: present
            update_cache: yes

        - name: Add Kubernetes GPG key
          become: yes
          block:
            - name: Create /etc/apt/keyrings directory
              file:
                path: /etc/apt/keyrings
                state: directory
                mode: '0755'

            - name: Add Kubernetes GPG key to keyring
              ansible.builtin.shell: |
                curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

            - name: Add Kubernetes repository
              apt_repository:
                repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
                filename: 'kubernetes.list'
                state: present
                update_cache: yes

        - name: Unhold Kubernetes packages if they are held
          dpkg_selections:
            name: "{{ item }}"
            selection: install
          loop:
            - kubelet
            - kubeadm
            - kubectl
        - name: Install Kubernetes packages
          apt:
            name:
              - docker.io
              - containerd
              - kubelet={{ kubernetes_version }}-00
              - kubeadm={{ kubernetes_version }}-00
              - kubectl={{ kubernetes_version }}-00
              - kubernetes-cni
            update_cache: yes
            state: present

        - name: Ensure kubelet directory exists
          file:
            path: /var/lib/kubelet
            state: directory

        - name: Hold Kubernetes packages
          dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - kubelet
            - kubeadm
            - kubectl

        - name: Install containerd 1.6
          block:
            - name: Ensure /etc/containerd directory exists
              file:
                path: /etc/containerd
                state: directory
                mode: '0755'

            - name: Download containerd
              get_url:
                url: "https://github.com/containerd/containerd/releases/download/v1.6.12/containerd-1.6.12-linux-amd64.tar.gz"
                dest: "/tmp/containerd-1.6.12-linux-amd64.tar.gz"

            - name: Extract containerd
              unarchive:
                src: "/tmp/containerd-1.6.12-linux-amd64.tar.gz"
                dest: "/tmp/"
                remote_src: yes

            - name: Copy containerd configuration file
              template:
                src: containerd-config.toml.j2
                dest: /etc/containerd/config.toml

            - name: Stop containerd service
              systemd:
                name: containerd
                state: stopped

            - name: Move containerd binaries
              command: mv /tmp/bin/* /usr/bin/
              args:
                creates: "/usr/bin/containerd"

            - name: Remove downloaded and extracted files
              file:
                path: "{{ item }}"
                state: absent
              loop:
                - "/tmp/containerd-1.6.12-linux-amd64.tar.gz"
                - "/tmp/bin"

            - name: Start and enable containerd
              systemd:
                name: containerd
                enabled: yes
                state: started

        - name: Configure containerd
          block:
            - name: Load br_netfilter module
              modprobe:
                name: br_netfilter
                state: present

            - name: Set sysctl parameters
              sysctl:
                name: "{{ item.key }}"
                value: "{{ item.value }}"
                sysctl_set: yes
                state: present
                reload: yes
              loop:
                - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
                - { key: 'net.ipv4.ip_forward', value: '1' }
                - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

            - name: Create containerd configuration file
              template:
                src: containerd-config.toml.j2
                dest: /etc/containerd/config.toml

        - name: Configure crictl to use containerd
          copy:
            content: |
              runtime-endpoint: unix:///run/containerd/containerd.sock
            dest: /etc/crictl.yaml

        - name: Configure kubelet to use containerd
          copy:
            content: |
              KUBELET_EXTRA_ARGS="--container-runtime-endpoint unix:///run/containerd/containerd.sock"
            dest: /etc/default/kubelet

        - name: Enable and start kubelet
          systemd:
            name: kubelet
            enabled: yes
            state: started

    - name: Load Balancer Configuration for HA setup
      set_fact:
        load_balancer_dns: "api-server.devops.tbc"
        load_balancer_port: 6443

    - name: Kubeadm Config for HA Setup
      copy:
        content: |
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: ClusterConfiguration
          kubernetesVersion: {{ kubernetes_version }}
          controlPlaneEndpoint: "{{ load_balancer_dns }}:{{ load_balancer_port }}"
          networking:
            podSubnet: 192.168.0.0/16
        dest: /etc/kubernetes/kubeadm-config.yaml

    - name: Initialize the First Master Node
      command: >
        kubeadm init --kubernetes-version={{ kubernetes_version }}
        --ignore-preflight-errors=NumCPU --control-plane-endpoint="{{ load_balancer_dns }}:{{ load_balancer_port }}"
        --upload-certs --apiserver-advertise-address={{ apiserver_advertise_address }}
        --pod-network-cidr=192.168.0.0/16
      register: kubeadm_init
      failed_when: kubeadm_init.rc != 0
      when: inventory_hostname == 'master01'

    - name: Check if kubeadm is installed
      command: which kubeadm
      register: kubeadm_path
      ignore_errors: yes

    - name: Fail if kubeadm is not installed
      fail:
        msg: "kubeadm not found in path"
      when: kubeadm_path.rc != 0

    - name: Store join commands in local file
      delegate_to: localhost
      run_once: true
      block:
        # - name: Capture master join command
        #   become: yes
        #   shell: |
        #     export PATH=$PATH:/path/to/kubeadm # Replace with actual path if necessary
        #     kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs)
        #   register: master_join_command
        #   delegate_to: localhost
        #   when: kubeadm_init is succeeded and inventory_hostname == 'master01'
        #   ignore_errors: yes
        - name: Capture master join command
          shell: kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs)
          delegate_to: localhost
          become: yes
          environment:
            PATH: "/path/to/kubeadm:$PATH"

        - name: Capture worker join command
          command: kubeadm token create --print-join-command --ttl 0
          register: worker_join_command

        - name: Save join commands to file
          copy:
            content: |
              {{ master_join_command.stdout }}
              {{ worker_join_command.stdout }}
            dest: /tmp/ansibletmp/join_command.yaml
      when: kubeadm_init is succeeded and inventory_hostname == 'master01'

    - name: Setup kubeconfig for local use
      block:
        - name: Create .kube directory
          file:
            path: $HOME/.kube
            state: directory

        - name: Copy admin.conf to user's kube config
          copy:
            src: /etc/kubernetes/admin.conf
            dest: $HOME/.kube/config
            remote_src: yes
          become_user: "{{ ansible_env.SUDO_USER | default(ansible_env.USER) }}"

    - name: Extract Kubernetes API server's certificate
      block:
        - name: Get API server address
          command: kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'
          register: apiserver_address

        - name: Extract and add API server's certificate
          command: openssl s_client -connect {{ apiserver_address.stdout.split('/')[2] }} </dev/null 2>/dev/null | openssl x509 -outform PEM
          register: apiserver_cert

        - name: Add certificate to system's trusted CA store
          copy:
            content: "{{ apiserver_cert.stdout }}"
            dest: /usr/local/share/ca-certificates/kubernetes.crt
          notify: Update CA certificates

    - name: Apply CNI Plugin
      command: kubectl apply -f https://github.com/kapalevan/Kubernetes/raw/main/k8s/multi-node-ha-cluster/master-nodes/yaml-manifests/cni/calico/calico.yaml

    - name: Setup etcdctl
      block:
        - name: Get architecture using dpkg
          command: dpkg --print-architecture
          register: dpkg_architecture

        - name: Download etcdctl
          get_url:
            url: "https://github.com/etcd-io/etcd/releases/download/{{ etcdctl_version }}/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
            dest: "/tmp/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"

        - name: Extract etcdctl
          unarchive:
            src: "/tmp/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
            dest: /usr/bin/
            remote_src: yes
            extra_opts: ["--strip-components=1"]

        - name: Cleanup downloaded files
          file:
            path: "/tmp/etcd-{{ etcdctl_version }}-linux-{{ dpkg_architecture.stdout }}.tar.gz"
            state: absent

    - name: Display command for joining other master nodes
      command: kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs)
      register: master_join_command

    - name: Show master node join command
      debug:
        msg: "{{ master_join_command.stdout }}"

    - name: Command to add a worker node
      command: kubeadm token create --print-join-command --ttl 0
      register: worker_join_command

    - name: Show worker node join command
      debug:
        msg: "{{ worker_join_command.stdout }}"

  handlers:
    - name: Update CA certificates
      command: update-ca-certificates