- hosts: masters
  become: true
  vars_files:
    - vars.yaml
    - vault.yaml

  tasks:
    - name: Check Ubuntu Version
      fail:
        msg: "This playbook is only compatible with Ubuntu 20.04."
      when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '20.04'

    - name: Update and Install Prerequisites
      apt:
        name:
          - bash-completion
          - binutils
        update_cache: yes

    - name: Setup Terminal and Bash Configuration
      blockinfile:
        path: "~/.bashrc"
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          alias c=clear
          complete -F __start_kubectl k
          force_color_prompt=yes
        create: yes

    - name: Setup vimrc
      blockinfile:
        path: "/root/.vimrc"
        block: |
          colorscheme ron
          set tabstop=2
          set shiftwidth=2
          set expandtab
        create: yes

    - name: Disable Swap
      command: swapoff -a

    - name: Update fstab to disable swap
      lineinfile:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s)'
        line: '#\1'

    - name: Reset Kubernetes if installed
      command: kubeadm reset -f
      ignore_errors: true

    - name: Remove existing Kubernetes packages
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - docker.io
        - containerd
        - kubelet
        - kubeadm
        - kubectl
        - kubernetes-cni
      when: ansible_distribution_version == '20.04'

    - name: Autoremove unnecessary packages
      apt:
        autoremove: yes

    - name: Add Podman GPG Key
      apt_key:
        url: "http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key"
        state: present

    - name: Add Podman Repo
      apt_repository:
        repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /"
        state: present
        filename: 'libcontainers-stable'

    - name: Install Podman and CRI tools
      apt:
        name:
          - podman
          - cri-tools
          - containers-common
        state: present

    - name: Configure container registries
      copy:
        content: |
          [registries.search]
          registries = ['docker.io']
        dest: /etc/containers/registries.conf

    - name: Add Kubernetes GPG key
      ansible.builtin.shell: |
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

    - name: Add Kubernetes repository
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
        create: yes
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Unhold Kubernetes packages if they are held
      dpkg_selections:
        name: "{{ item }}"
        selection: install
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Install Kubernetes packages
      apt:
        name:
          - docker.io
          - containerd
          - kubelet={{ kubernetes_version }}-00
          - kubeadm={{ kubernetes_version }}-00
          - kubectl={{ kubernetes_version }}-00
          - kubernetes-cni
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Install containerd 1.6
      block:
        - name: Download containerd
          get_url:
            url: "https://github.com/containerd/containerd/releases/download/v1.6.12/containerd-1.6.12-linux-amd64.tar.gz"
            dest: "/tmp/containerd-1.6.12-linux-amd64.tar.gz"

        - name: Extract containerd
          unarchive:
            src: "/tmp/containerd-1.6.12-linux-amd64.tar.gz"
            dest: "/tmp/"
            remote_src: yes

        - name: Move containerd binaries
          command: mv /tmp/bin/* /usr/bin/
          args:
            creates: "/usr/bin/containerd"

        - name: Remove downloaded and extracted files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/containerd-1.6.12-linux-amd64.tar.gz"
            - "/tmp/bin"

        - name: Start and enable containerd
          systemd:
            name: containerd
            enabled: yes
            state: started

    - name: Configure containerd
      template:
        src: containerd-config.toml.j2
        dest: /etc/containerd/config.toml

    - name: Configure Networking
      block:
        - name: Load br_netfilter module
          modprobe:
            name: br_netfilter
            state: present

        - name: Set sysctl parameters
          sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_set: yes
            state: present
            reload: yes
          loop:
            - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
            - { key: 'net.ipv4.ip_forward', value: '1' }
            - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

    - name: Create Kubeadm Config for HA Setup
      template:
        src: kubeadm-config.yaml.j2
        dest: /etc/kubernetes/kubeadm-config.yaml
      when: inventory_hostname == "master01"

    - name: Initialize Kubernetes cluster
      shell: >
        kubeadm init
        --kubernetes-version {{ kubernetes_version }}
        --control-plane-endpoint "{{ load_balancer_dns }}:{{ load_balancer_port }}"
        --upload-certs
        --apiserver-advertise-address {{ apiserver_advertise_address }}
        --pod-network-cidr {{ pod_subnet }}
      register: init_output
      when: inventory_hostname == "master01"

    - name: Store join commands in local file
      block:
        - name: Create tmp directory
          file:
            path: "{{ ansible_env.HOME }}/tmp"
            state: directory
            mode: '0755'
        - name: Store join commands in local file
          copy:
            content: "{{ init_output.stdout }}"
            dest: "{{ ansible_env.HOME }}/tmp/kube_join_commands"
          when: inventory_hostname == "master01"
          delegate_to: localhost

    - name: Debug init output
      debug:
        var: init_output.stdout
      when: inventory_hostname == "master01"

    - name: Setup kubeconfig and apply CNI Plugin on the first master
      block:
        - name: Copy admin.conf to user's kube config
          copy:
            src: "/etc/kubernetes/admin.conf"
            dest: "{{ ansible_env.HOME }}/.kube/config"
            remote_src: yes
            mode: '0644'

        - name: Apply Calico CNI Plugin
          command: "kubectl apply -f https://github.com/kapalevan/Kubernetes/raw/main/k8s/multi-node-ha-cluster/master-nodes/yaml-manifests/cni/calico/calico.yaml"
      when: inventory_hostname == "master01"

    - name: Setup etcdctl
      block:
        - name: Download etcdctl
          get_url:
            url: "https://github.com/etcd-io/etcd/releases/download/{{ etcdctl_version }}/etcd-{{ etcdctl_version }}-linux-amd64.tar.gz"
            dest: "/tmp/etcd-{{ etcdctl_version }}-linux-amd64.tar.gz"

        - name: Extract etcdctl
          unarchive:
            src: "/tmp/etcd-{{ etcdctl_version }}-linux-amd64.tar.gz"
            dest: "/tmp/"
            remote_src: yes
            extra_opts: ["--strip-components=1"]

        - name: Move etcdctl to /usr/bin
          command: mv /tmp/etcdctl /usr/bin/
          args:
            creates: "/usr/bin/etcdctl"

        - name: Cleanup downloaded files
          file:
            path: "/tmp/etcd-{{ etcdctl_version }}-linux-amd64.tar.gz"
            state: absent