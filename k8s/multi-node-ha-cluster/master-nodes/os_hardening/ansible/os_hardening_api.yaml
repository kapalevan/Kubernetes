---
- hosts: masters
  become: true
  vars_files:
    - vars.yaml
    - vault.yaml

  tasks:
    # - name: Remove existing Netplan configurations
    #   ansible.builtin.file:
    #     path: /etc/netplan/{{ item }}
    #     state: absent
    #   loop: "{{ lookup('ansible.builtin.fileglob', '/etc/netplan/*.yaml', wantlist=True) | map('basename') }}"
    #   when: dns_servers is defined

    - name: Configure /run/systemd/resolve/resolv.conf
      lineinfile:
        path: /run/systemd/resolve/resolv.conf
        line: "{{ item }}"
        create: yes
      loop:
        - "nameserver {{ dns_servers | join(' ') }}"
        - "search {{ domain_name }}"
      when: dns_servers is defined or domain_name is defined
      notify: Restart systemd-resolved

    - name: Create symbolic link for /etc/resolv.conf
      file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: yes
      when: dns_servers is defined or domain_name is defined

    - name: Generate Netplan configuration
      template:
        src: netplan-config.j2
        dest: /etc/netplan/01-netcfg.yaml
      when: dns_servers is defined

    - name: Apply Netplan configuration
      command: netplan apply
      when: dns_servers is defined

    - name: Set system timezone
      timezone:
        name: "{{ os_hardening.timezone }}"
        hwclock: local

    - name: Ensure RTC is set to UTC
      ansible.builtin.command:
        cmd: timedatectl set-local-rtc 0

    - name: Set system hostname
      hostname:
        name: "{{ os_hardening.hostname }}"

    - name: Enable UFW
      ufw:
        state: disabled
      when: inventory_hostname == "api-server"

    - name: Configure SSH daemon
      template:
        src: sshd_config.j2
        dest: /etc/ssh/sshd_config
      notify: Restart sshd

    - name: Configure SSH client
      template:
        src: ssh_config.j2
        dest: /etc/ssh/ssh_config

    - name: Set up repository configurations
      apt_repository:
        repo: "{{ item }}"
        state: present
      loop: "{{ os_hardening.repo.debian.ubuntu }}"

    - name: Install required packages
      apt:
        name: "{{ os_hardening.packages.apt }}"
        state: present

    - name: Install Fail2ban
      apt:
        name: fail2ban
        state: latest
      when: os_hardening.fail2ban.enabled

    - name: Create user accounts
      user:
        name: "{{ item.name }}"
        group: sudo
        append: yes
      loop: "{{ os_hardening.users }}"

    - name: Install and configure auditd
      apt:
        name: auditd
        state: latest
      when: os_hardening.audit_logging.enabled

    - name: Enable automatic security updates
      apt:
        name: unattended-upgrades
        state: latest

    # - name: Install and configure NTP
    #   apt:
    #     name: ntp
    #     state: latest
    #   when: os_hardening.ntp.enabled

    - name: Secure /tmp filesystem
      mount:
        path: /tmp
        src: tmpfs
        fstype: tmpfs
        opts: rw,nosuid,nodev,noexec,relatime
        state: mounted

    - name: Configure system-wide limits
      blockinfile:
        path: /etc/security/limits.conf
        block: |
          * soft nproc 65535
          * hard nproc 65535
          * soft nofile 65535
          * hard nofile 65535
        create: yes

    - name: Configure logrotate for system logs
      blockinfile:
        path: /etc/logrotate.d/syslogs
        block: |
          /var/log/cron.log
          /var/log/messages
          /var/log/syslog
          /var/log/mail.info
          /var/log/mail.warn
          /var/log/mail.err
          /var/log/mail.log
          /var/log/daemon.log
          /var/log/kern.log
          /var/log/auth.log
          /var/log/user.log
          /var/log/lpr.log
          /var/log/debug
          {
            rotate 7
            daily
            missingok
            notifempty
            compress
            delaycompress
            sharedscripts
            postrotate
              /usr/lib/rsyslog/rsyslog-rotate
            endscript
          }
        create: yes

    - name: Restart the VM
      ansible.builtin.reboot:
      when: dns_servers is defined

  handlers:
    - name: Restart sshd
      service:
        name: ssh
        state: restarted
    - name: Restart systemd-resolved
      service:
        name: systemd-resolved
        state: restarted
